/**
 * 문제 14 표 편집
 * 문제 URL: https://programmers.co.kr/learn/courses/30/lessons/81303
 * 정답 URL: https://github.com/kciter/coding-interview-js/blob/main/solution/14.js
 * 문제 설명:
 *  업무용 소프트웨어를 개발하는 니니즈웍스의 인턴인 앙몬드는 명령어 기반으로 표의 행을 선택, 삭제, 복구하는
 *  프로그램을 작성하는 과제를 맡았습니다. 세부 요구 사항은 다음과 같습니다.
 *  --------------------------------------------------
 *    행 번호      |   이름
 *      0        |    무지
 *      1        |    콘
 *      2        |   어피치 (선택됨)
 *      3        |   제이지
 *      4        |   프로도
 *      5        |   네오
 *      6        |   튜브
 *      7        |   라이언
 *  --------------------------------------------------
 *  표에서 진하게 칠한 칸은 선택한 행입니다. 한 번에 한 행만 선택할 수 있으며, 표의 범위를 벗어날 수 없습니다.
 *  이때 다음과 같은 명령어를 이용해 표를 편집합니다.
 *  - "U X": 현재 선택된 행에서 X칸 위에 있는 행을 선택합니다.
 *  - "D X": 현재 선택된 행에서 X칸 아래에 있는 행을 선택합니다.
 *  - "C": 현재 선택된 행을 삭제한 후, 바로 아래 행을 선택합니다. 단, 삭제된 행이 가장 마지막 행인 경우 바로 윗 행을 선택합니다.
 *  - "Z": 가장 최근에 삭제된 행을 원래대로 복구합니다. 단, 현재 선택된 행은 바뀌지 않습니다.
 *
 * 예를 들어 위 표에서 "D 2"를 수행하면 다음 그림의 왼쪽처럼 4행이 선택되며, "C"를 수행하면 선택된 행을 삭제하고
 * 바로 아래 행이었던 "네오"가 적힌 행을 선택합니다.
 *
 * ----------------------------                   ------------------------------
 *   행 번호      |   이름                               행 번호      |   이름
 *    0        |    무지                                  0        |    무지
 *    1        |    콘                                    1        |    콘
 *    2        |   어피치                                  2        |   어피치
 *    3        |   제이지                                  3        |   제이지
 * d2 4        |   프로도 (선택됨)                        c  4        |   프로도
 *    5        |   네오                                    5        |   네오
 *    6        |   튜브                                    6        |   튜브
 *    7        |   라이언                                   7        |   라이언
 * ------------------------------                  ------------------------------
 *
 * 다시 "U 3"을 수행한 다음 "C를 수행한 후의 표 상태는 다음 그림과 같습니다.
 * ----------------------------                   ------------------------------
 *  행 번호      |   이름                               행 번호      |   이름
 *   0        |    무지                                  0        |    무지
 *u3  1        |    콘  (선택됨)                          1        |    어피치
 *   2        |   어피치                                  2        |   제이지
 *   3        |   제이지                                  3        |   네오
 *   4        |   네오                                   4        |   튜브
 *   5        |   튜브                                   5        |   라이언
 *  ------------------------------                  ------------------------------
 *
 * 다음으로 "D 4" 수행한 다음 "C"를 수행한 후의 표 상태는 다음 그림과 같습니다. 5행이 표의 마지막 행 이므로
 * 이 경우 바로 윗 행을 선택하는 점에 주의 합니다.
 *
 * ----------------------------                   ------------------------------
 *    행 번호      |   이름                              행 번호      |   이름
 *      0        |    무지                                0        |    무지
 *      1        |    어피치                               1        |    어피치
 *      2        |   제이지                                2        |   제이지
 *      3        |   네오                                 3        |   네오
 *      4        |   튜브                               c 4        |   라이언
 * d 4  5        |   라이언
 * ------------------------------                  ------------------------------
 *
 * "U 2"를 수행하면 현재 선택한 행은 2행이 됩니다.
 *
 * ------------------------------
 *   행 번호      |   이름
 *    0        |    무지
 *    1        |    어피치
 * u2 2        |   제이지 (선택됨)
 *    3        |   네오
 *    4        |   튜브
 * ------------------------------
 *
 * 위 상태에서 "Z"를 수행하면 가장 최근에 제거한 "라이언"이 적힌 행이 복구 됩니다.
 * ------------------------------
 *  행 번호      |   이름
 *    0        |    무지
 *    1        |    어피치
 * z  2        |   제이지 (선택됨)
 *    3        |   네오
 *    4        |   튜브
 *    5        |   라이언
 * ------------------------------
 *
 * 다시 한번 "Z"를 수행 하면 그 다음으로 제거한 "콘"이 적힌 행이 복구 됩니다.
 * 현재 선택한 행은 바뀌지 않는 점에 주의하세요.
 * ------------------------------
 *    행 번호      |   이름
 *      0        |    무지
 *      1        |    콘
 *      2        |    어피치
 * z    3        |   제이지 (선택됨)
 *      4        |   네오
 *      5        |   튜브
 *      6        |   라이언
 * ------------------------------
 *
 * 최종 표의 상태와 처음 표의 상태를 비교해 삭제되지 않은 행은 "O", 삭제된 행은 "X"로 표시하면 다음과 같습니다.
 * ----------------------------------------------------------
 *      행 번호     |    이름     |   비교
 *        0       |    무지      |    O
 *        1       |    콘       |    O
 *        2       |    어피치    |    O
 *        3       |    제이지    |    O
 *        4       |    프로도    |    X
 *        5       |    네오      |    O
 *        6       |    튜브      |    O
 *        7       |    라이언    |    O
 * ----------------------------------------------------------
 * 처음 표의 행 개수를 나타내는 정수 n, 처음에 선택한 행의 위치를 나타내는 정수 k, 수행한 명령어들이 담긴 문자열
 * 배열 cmd가 주어질 때, 모든 명령어를 수행한 후의 표의 상태와 처음 표의 상태를 비교해 삭제되지 않은 행은 "O",
 * 삭제된 행은 "X"로 표시하여 문자열 형태로 return 하도록 solution 함수를 완성해주세요.
 *
 * 제약 조건
 * - 5 <= n <= 100,000
 * - 0 <= k < n
 * - 1 <= cmd.length <= 200,000
 *   - cmd의 각 원소는 "U X", "D X", "C", "Z" 중 하나입니다.
 *   - X는 1 이상 300,000 이하인 자연수이며, 현재 선택된 행에서 X칸 위, 아래에 있는 행을 의미합니다.
 *   - X가 나타내는 자연수에 쉼표는 없습니다. 예를 들어 123,456가 아니라 123456와 같이 자연수가 주어집니다.
 *   - cmd에 등장하는 모든 X들의 값을 합친 결과가 1,000,000 이하인 경우만 입력으로 주어집니다.
 *   - 표의 모든 행을 제거해 행이 하나도 남지 않는 경우는 입력으로 주어지지 않습니다.
 *   - 문제에서 각 행이 제거되고 복구 되는 과정을 자연스럽게 보여주기 위헤 "이름"이라는 열을 사용했으나, 실제 문제를 푸는
 *     과정에서는 필요하지 않습니다. "이름" 열에는 서로 다른 이름들이 중복 없이 채워져 있다고 가정하고 문제를 해결하세요.
 * - 표의 범위를 벗어나는 이동은 입력으로 주어지지 않습니다.
 * - 원래대로 복구할 행이 없을 때 즉 삭제한 행이 없을 때 "Z"가 명령어로 주어지는 경우는 없습니다.
 * - 정답은 표의 0행부터 n - 1행까지에 해당되는 O, X를 순서대로 이어붙인 문자열 형태로 return 해주세요.
 *
 * 정확성 테스트 케이스 제약 조건
 * - 정확성 테스트: 10초
 * - 5 <= n <= 1,000
 * - 1 <= cmd.length <= 1,000
 *
 * 효율성 테스트 케이스 제약 조건
 * - 효율성 테스트: 언어별로 작성된 정답 코드의 실행 시간의 적정 배수
 * - 주어진 조건 외 추가 제약 조건 없습니다.
 *
 * 입출력 예
 * ----------------------------------------------------------
 *    n    |    k    |                     cmd                                            |     result
 *    8    |    2    | ["D 2", "C", "U 3", "C", "D 4", "C", "U 2", "Z", "Z"]              |    "OOOOXOOO"
 *    8    |    2    | ["D 2", "C", "U 3", "C", "D 4", "C", "U 2", "Z", "Z", "U 1", "C"]  |    "OOXOXOOO"
 */

export default function solution(n, k, cmd) {
  // 삭제된 행의 인덱스를 저장하는 배열
  const deleted = [];

  // 연결 리스트에서 각 행 위아래의 행의 인덱스를 저장하는 배열
  const up = [...new Array(n + 2)].map((_, i) => i - 1);
  const down = [...new Array(n + 2)].map((_, i) => i + 1);

  // 현재 위치를 나타내는 인덱스
  k += 1;

  // 주어진 명령어(cmd) 배열 요소를 하나씩 처리
  for (const item of cmd) {
    // 현재 위치를 삭제하고 그 다음 위치로 이동
    if (item[0] === 'C') {
      deleted.push(k);
      up[down[k]] = up[k];
      down[up[k]] = down[k];
      k = n < down[k] ? up[k] : down[k];
    } else if (item[0] === 'Z') {
      //가장 최근에 삭제된 행을 복원
      const restore = deleted.pop();
      down[up[restore]] = restore;
      up[down[restore]] = restore;
    } else {
      const [action, num] = item.split(' ');
      if (action === 'U') {
        for (let i = 0; i < num; i++) {
          k = up[k];
        }
      } else {
        for (let i = 0; i < num; i++) {
          k = down[k];
        }
      }
    }
  }

  // 삭제된 행의 위치에 "X"를, 그렇지 않은 행의 위치에 "O"를 저장
  const answer = Array(n).fill('O');
  for (const d of deleted) {
    answer[d - 1] = 'X';
  }

  return answer.join('');
}
